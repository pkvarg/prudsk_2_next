// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Instead of the standard import:
// import { PrismaClient } from '@prisma/client'

// You'd use:
//import { PrismaClient } from '../src/generated/prisma'

generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  name                 String? // Made optional in case some users don't have names
  email                String    @unique
  password             String?
  isRegistered         Boolean?  @default(false) // Made optional
  registerToken        String?
  isAdmin              Boolean?  @default(false) // Made optional
  isAssistant          Boolean?  @default(false) // Made optional
  isSubscribed         Boolean?  @default(false) // Made optional
  isUnsubscribed       Boolean?  @default(false) // Made optional
  googleId             String?
  passwordChangedAt    DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  products  Product[]
  orders    Order[]
  audios    Audio[]
  videos    Video[]
  banners   Banner[]
  reviews   Review[]
  favorites Favorite[]

  @@map("users")
}

model Audio {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  audioTitle  String?
  mp3file     String?
  category    String?
  subcategory String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User?   @relation(fields: [userId], references: [id]) // Made optional
  userId String? @db.ObjectId // Made optional

  @@map("audios")
}

model Counter {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  visitorsCount Int?
  createdAt     DateTime? @default(now()) // <-- notice the "?" here
  updatedAt     DateTime? @updatedAt // <-- and maybe here too

  @@map("counters")
}

model Banner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  bannerTitle String?
  image       String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User?   @relation(fields: [userId], references: [id]) // Made optional
  userId String? @db.ObjectId // Made optional

  @@map("banners")
}

model Order {
  id                         String    @id @default(auto()) @map("_id") @db.ObjectId
  name                       String? // Made optional
  email                      String? // Made optional
  orderNumber                String? // Made optional
  paymentMethod              String? // Made optional
  taxPrice                   Float?    @default(0.0) // Made optional
  shippingPrice              Float?    @default(0.0) // Made optional
  totalPrice                 Float?    @default(0.0) // Made optional
  isPaid                     Boolean?  @default(false) // Made optional
  paidAt                     DateTime?
  isDelivered                Boolean?  @default(false) // Made optional
  deliveredAt                DateTime?
  isCancelled                Boolean?  @default(false) // Made optional
  isCancelledOrderNumberUsed Boolean?  @default(false) // Made optional
  initPaymentId              String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Complex fields (JSON in MongoDB)
  orderItems      Json? // Made optional (single item)
  shippingAddress Json? // Made optional
  paymentResult   Json?
  discounts       Json?

  // Relations
  user   User?   @relation(fields: [userId], references: [id]) // Made optional
  userId String? @db.ObjectId // Made optional

  @@map("orders")
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  image           String?
  author          String?
  category        String?
  description     String?
  excerpt         Json?
  rating          Float?   @default(0) // Made optional
  numReviews      Int?     @default(0) // Made optional
  price           Float?   @default(0) // Made optional
  countInStock    Int?     @default(0) // Made optional
  catalog         String?
  weight          String?
  related         Json?
  related2        Json?
  related3        Json?
  discount        Float?
  discountedPrice Float?
  tags            String?
  language        String?
  binding         String?
  pages           String?
  isbn            String?
  year            String?
  searchName      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user       User?      @relation(fields: [userId], references: [id])
  userId     String?    @db.ObjectId
  reviews    Review[]
  favoriteOf Favorite[]

  @@map("products")
}

model Review {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String? // Made optional
  rating         Float? // Made optional
  comment        String? // Made optional
  isAcknowledged Boolean? @default(false) // Made optional
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user      User?    @relation(fields: [userId], references: [id]) // Made optional
  userId    String?  @db.ObjectId // Made optional
  product   Product? @relation(fields: [productId], references: [id]) // Made optional
  productId String?  @db.ObjectId // Made optional
}

model Favorite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  favoriteOf String   @db.ObjectId // User ID as ObjectId string
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  user      User?    @relation(fields: [favoriteOf], references: [id]) // ADD THIS LINE

  @@map("favorites")
}

model Video {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  videoTitle String?
  code       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user   User?   @relation(fields: [userId], references: [id]) // Made optional
  userId String? @db.ObjectId // Made optional

  @@map("videos")
}
