// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Instead of the standard import:
// import { PrismaClient } from '@prisma/client'

// You'd use:
//import { PrismaClient } from '../src/generated/prisma'

generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String    @unique
  password           String?
  isRegistered       Boolean   @default(false)
  registerToken      String?
  isAdmin            Boolean   @default(false)
  isAssistant        Boolean   @default(false)
  isSubscribed       Boolean   @default(false)
  isUnsubscribed     Boolean   @default(false)
  googleId           String?
  passwordChangedAt  DateTime?
  passwordResetToken String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  products Product[]
  orders   Order[]
  audios   Audio[]
  videos   Video[]
  banners  Banner[]
  reviews  Review[]

  @@map("users") // Maps to the "users" collection
}

model Audio {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  audioTitle  String?
  mp3file     String?
  category    String?
  subcategory String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Counter {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  visitorsCount Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Banner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  bannerTitle String?
  image       String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Order {
  id                         String    @id @default(auto()) @map("_id") @db.ObjectId
  name                       String
  email                      String
  orderNumber                String
  paymentMethod              String
  taxPrice                   Float     @default(0.0)
  shippingPrice              Float     @default(0.0)
  totalPrice                 Float     @default(0.0)
  isPaid                     Boolean   @default(false)
  paidAt                     DateTime?
  isDelivered                Boolean   @default(false)
  deliveredAt                DateTime?
  isCancelled                Boolean   @default(false)
  isCancelledOrderNumberUsed Boolean   @default(false)
  initPaymentId              String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Complex fields (JSON in MongoDB)
  orderItems      Json[]
  shippingAddress Json
  paymentResult   Json?
  discounts       Json?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  image           String?
  author          String?
  category        String?
  description     String?
  excerpt         Json?
  rating          Float    @default(0)
  numReviews      Int      @default(0)
  price           Float    @default(0)
  countInStock    Int      @default(0)
  catalog         String?
  weight          String?
  related         Json?
  related2        Json?
  related3        Json?
  discount        Float?
  discountedPrice Float?
  tags            String?
  language        String?
  binding         String?
  pages           String?
  isbn            String?
  year            String?
  searchName      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId // Make it optional with the ?

  reviews    Review[]
  favoriteOf Favorite[]

  @@map("products") // Maps to the "products" collection
}

model Review {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  rating         Float
  comment        String
  isAcknowledged Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Favorite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  favoriteOf Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Video {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  videoTitle String?
  code       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}
